import "platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Families.msl"
import "platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl"
import "platform:/plugin/org.emoflon.neo.neocore/model/AttributeConstraintsLibrary.msl"

grammar F2P_CO {
	rules {
		RegisterToRegisterRule
		IgnoreFamilyRule
		SonToMaleRule
		DaughterToFemaleRule
		FatherToMaleRule
		MotherToFemaleRule
	}
}

  rule RegisterToRegisterRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} 


  rule IgnoreFamilyRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
	}
	
	f:Family {
		.enamespace : <__srcModelName>
	}

	
	attributeConstraints {
	}
} 


  rule SonToMaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 


  rule DaughterToFemaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 


  rule FatherToMaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 


  rule MotherToFemaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

